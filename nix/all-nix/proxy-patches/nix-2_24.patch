From 4ccb2e79b6965383d6c98a241747549beb46a321 Mon Sep 17 00:00:00 2001
From: Brian Olsen <brian@maven-group.org>
Date: Sun, 2 Feb 2025 18:18:23 +0100
Subject: [PATCH] feat: Add unix socket proxy store

---
 src/libstore/proxy-store.cc | 93 +++++++++++++++++++++++++++++++++++++
 src/libstore/proxy-store.hh | 72 ++++++++++++++++++++++++++++
 src/libstore/proxy-store.md |  8 ++++
 3 files changed, 173 insertions(+)
 create mode 100644 src/libstore/proxy-store.cc
 create mode 100644 src/libstore/proxy-store.hh
 create mode 100644 src/libstore/proxy-store.md

diff --git a/src/libstore/proxy-store.cc b/src/libstore/proxy-store.cc
new file mode 100644
index 000000000..694cf5725
--- /dev/null
+++ b/src/libstore/proxy-store.cc
@@ -0,0 +1,93 @@
+#include "proxy-store.hh"
+#include "unix-domain-socket.hh"
+#include "worker-protocol.hh"
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#ifdef _WIN32
+# include <winsock2.h>
+# include <afunix.h>
+#else
+# include <sys/socket.h>
+# include <sys/un.h>
+#endif
+
+namespace nix {
+
+ProxyStoreConfig::ProxyStoreConfig(
+    std::string_view scheme,
+    std::string_view authority,
+    const Params & params)
+    : StoreConfig(params)
+    , RemoteStoreConfig(params)
+    , path{authority}
+{
+    if (scheme != ProxyStoreConfig::scheme) {
+        throw UsageError("Scheme must be 'proxy'");
+    }
+}
+
+
+std::string ProxyStoreConfig::doc()
+{
+    return
+        #include "proxy-store.md"
+        ;
+}
+
+
+// A bit gross that we now pass empty string but this is knowing that
+// empty string will later default to the same nixDaemonSocketFile. Why
+// don't we just wire it all through? I believe there are cases where it
+// will live reload so we want to continue to account for that.
+ProxyStore::ProxyStore(const Params & params)
+    : ProxyStore(scheme, "", params)
+{}
+
+
+ProxyStore::ProxyStore(std::string_view scheme, std::string_view authority, const Params & params)
+    : StoreConfig(params)
+    , RemoteStoreConfig(params)
+    , ProxyStoreConfig(scheme, authority, params)
+    , Store(params)
+    , RemoteStore(params)
+{
+}
+
+
+std::string ProxyStore::getUri()
+{
+    return std::string(scheme) + "://" + path;
+}
+
+
+void ProxyStore::Connection::closeWrite()
+{
+    shutdown(toSocket(fd.get()), SHUT_WR);
+}
+
+
+ref<RemoteStore::Connection> ProxyStore::openConnection()
+{
+    auto conn = make_ref<Connection>();
+
+    /* Connect to a daemon that does the privileged work for us. */
+    conn->fd = createUnixDomainSocket();
+
+    nix::connect(toSocket(conn->fd.get()), path);
+
+    conn->from.fd = conn->fd.get();
+    conn->to.fd = conn->fd.get();
+
+    conn->startTime = std::chrono::steady_clock::now();
+
+    return conn;
+}
+
+
+static RegisterStoreImplementation<ProxyStore, ProxyStoreConfig> regProxyStoreStore;
+
+}
diff --git a/src/libstore/proxy-store.hh b/src/libstore/proxy-store.hh
new file mode 100644
index 000000000..eb1f81925
--- /dev/null
+++ b/src/libstore/proxy-store.hh
@@ -0,0 +1,72 @@
+#pragma once
+///@file
+
+#include "remote-store.hh"
+#include "remote-store-connection.hh"
+#include "indirect-root-store.hh"
+
+namespace nix {
+
+struct ProxyStoreConfig : virtual virtual RemoteStoreConfig
+{
+    // TODO(fzakaria): Delete this constructor once moved over to the factory pattern
+    // outlined in https://github.com/NixOS/nix/issues/10766
+    using RemoteStoreConfig::RemoteStoreConfig;
+
+    /**
+     * @param authority is the socket path.
+     */
+    ProxyStoreConfig(
+        std::string_view scheme,
+        std::string_view authority,
+        const Params & params);
+
+    const std::string name() override { return "Proxy Daemon Store"; }
+
+    std::string doc() override;
+
+    /**
+     * The path to the unix domain socket.
+     */
+    Path path;
+
+protected:
+    static constexpr char const * scheme = "proxy";
+
+public:
+    static std::set<std::string> uriSchemes()
+    { return {scheme}; }
+};
+
+class ProxyStore : public virtual ProxyStoreConfig
+    , public virtual RemoteStore
+{
+public:
+
+    /**
+     * @deprecated This is the old API to construct the store.
+    */
+    ProxyStore(const Params & params);
+
+    /**
+     * @param authority is the socket path.
+     */
+    ProxyStore(
+        std::string_view scheme,
+        std::string_view authority,
+        const Params & params);
+
+    std::string getUri() override;
+
+private:
+
+    struct Connection : RemoteStore::Connection
+    {
+        AutoCloseFD fd;
+        void closeWrite() override;
+    };
+
+    ref<RemoteStore::Connection> openConnection() override;
+};
+
+}
diff --git a/src/libstore/proxy-store.md b/src/libstore/proxy-store.md
new file mode 100644
index 000000000..96a94d5a5
--- /dev/null
+++ b/src/libstore/proxy-store.md
@@ -0,0 +1,8 @@
+R"(
+
+**Store URL format**: `proxy://`*path*
+
+This store type accesses a Nix store by talking to a Nix daemon
+listening on the Unix domain socket *path*.
+
+)"
-- 
2.39.5 (Apple Git-154)


From 734bfcc68554c07ec4806aab55d24f1972916eee Mon Sep 17 00:00:00 2001
From: Brian Olsen <brian@maven-group.org>
Date: Mon, 3 Feb 2025 01:15:46 +0100
Subject: [PATCH] libstore: Add unix socket proxy store

Change-Id: I5e02ee0fd75a0884d3250e0382e16f9efd3539de
---
 src/libstore/meson.build    |  2 +
 src/libstore/proxy-store.cc | 73 +++++++++++++++++++++++++++++++++++++
 src/libstore/proxy-store.hh | 49 +++++++++++++++++++++++++
 src/libstore/proxy-store.md |  7 ++++
 4 files changed, 131 insertions(+)
 create mode 100644 src/libstore/proxy-store.cc
 create mode 100644 src/libstore/proxy-store.hh
 create mode 100644 src/libstore/proxy-store.md

diff --git a/src/libstore/meson.build b/src/libstore/meson.build
index 5416bd2b5..3121b3945 100644
--- a/src/libstore/meson.build
+++ b/src/libstore/meson.build
@@ -68,6 +68,7 @@ libstore_sources = files(
   'pathlocks.cc',
   'platform.cc',
   'profiles.cc',
+  'proxy-store.cc',
   'realisation.cc',
   'remote-fs-accessor.cc',
   'remote-store.cc',
@@ -143,6 +144,7 @@ libstore_headers = files(
   'path.hh',
   'pathlocks.hh',
   'profiles.hh',
+  'proxy-store.hh',
   'realisation.hh',
   'remote-fs-accessor.hh',
   'remote-store-connection.hh',
diff --git a/src/libstore/proxy-store.cc b/src/libstore/proxy-store.cc
new file mode 100644
index 000000000..b0eb7e2df
--- /dev/null
+++ b/src/libstore/proxy-store.cc
@@ -0,0 +1,73 @@
+#include "proxy-store.hh"
+#include "unix-domain-socket.hh"
+#include "worker-protocol.hh"
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#include <cstring>
+
+
+namespace nix {
+
+std::string ProxyStoreConfig::doc()
+{
+    return
+        #include "proxy-store.md"
+        ;
+}
+
+
+ProxyStore::ProxyStore(
+    const std::string scheme,
+    std::string socket_path,
+    const Params & params)
+    : StoreConfig(params)
+    , RemoteStoreConfig(params)
+    , ProxyStoreConfig(params)
+    , Store(params)
+    , RemoteStore(params)
+    , path(socket_path)
+{
+}
+
+
+std::string ProxyStore::getUri()
+{
+    return std::string("proxy://") + path;
+}
+
+
+void ProxyStore::Connection::closeWrite()
+{
+    shutdown(fd.get(), SHUT_WR);
+}
+
+
+ref<RemoteStore::Connection> ProxyStore::openConnection()
+{
+    auto conn = make_ref<Connection>();
+
+    /* Connect to a daemon that does the privileged work for us. */
+    conn->fd = createUnixDomainSocket();
+
+    nix::connect(conn->fd.get(), path);
+
+    conn->from.fd = conn->fd.get();
+    conn->to.fd = conn->fd.get();
+
+    conn->startTime = std::chrono::steady_clock::now();
+
+    return conn;
+}
+
+
+
+static RegisterStoreImplementation<ProxyStore, ProxyStoreConfig> regProxyStore;
+
+}
diff --git a/src/libstore/proxy-store.hh b/src/libstore/proxy-store.hh
new file mode 100644
index 000000000..53a0b0894
--- /dev/null
+++ b/src/libstore/proxy-store.hh
@@ -0,0 +1,49 @@
+#pragma once
+///@file
+
+#include "remote-store.hh"
+#include "remote-store-connection.hh"
+
+namespace nix {
+
+struct ProxyStoreConfig : virtual RemoteStoreConfig
+{
+    ProxyStoreConfig(const Params & params)
+        : StoreConfig(params)
+        , RemoteStoreConfig(params)
+    {
+    }
+
+    const std::string name() override { return "Proxy Daemon Store"; }
+
+    std::string doc() override;
+};
+
+class ProxyStore : public virtual ProxyStoreConfig, public virtual RemoteStore
+{
+public:
+
+    ProxyStore(const std::string scheme, std::string path, const Params & params);
+
+    std::string getUri() override;
+
+    static std::set<std::string> uriSchemes()
+    { return {"proxy"}; }
+
+    // FIXME extend daemon protocol, move implementation to RemoteStore
+    std::optional<std::string> getBuildLogExact(const StorePath & path) override
+    { unsupported("getBuildLogExact"); }
+
+private:
+
+    struct Connection : RemoteStore::Connection
+    {
+        AutoCloseFD fd;
+        void closeWrite() override;
+    };
+
+    ref<RemoteStore::Connection> openConnection() override;
+    std::string path;
+};
+
+}
diff --git a/src/libstore/proxy-store.md b/src/libstore/proxy-store.md
new file mode 100644
index 000000000..c267fff94
--- /dev/null
+++ b/src/libstore/proxy-store.md
@@ -0,0 +1,7 @@
+R"(
+
+**Store URL format**: `proxy://`*path*
+
+This store type accesses a Nix store by talking to a Nix daemon
+listening on the Unix domain socket *path*.
+)"
-- 
2.44.1

